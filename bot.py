import sqlite3
import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
# –í–∞–∂–ª–∏–≤–æ: —Ñ–∞–π–ª database.py –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤ —Ç—ñ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —â–æ —ñ —Ü–µ–π —Ñ–∞–π–ª
from database import init_db
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
init_db()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
ITEMS_PER_PAGE = 3
YOUR_ADMIN_ID = 1634618032  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π Telegram ID
TOKEN = "8047320199:AAF2B6pyxk8vWMp0RZxT75Oy43uWki-Ykhg"  # –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
user_filters = {}
adding_shoe_state = {}  # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
user_menu_stack = {}    # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –º–µ–Ω—é

# –ï–º–æ–¥–∑—ñ –¥–ª—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
EMOJI = {
    "shoes": "üëü",
    "filter": "üîç",
    "size": "üìè",
    "brand": "üè∑Ô∏è",
    "admin": "üõ†Ô∏è",
    "add": "‚ûï",
    "remove": "üóëÔ∏è",
    "list": "üìã",
    "back": "üîô",
    "apply": "‚úÖ",
    "reset": "‚ùå",
    "cart": "üõí",
    "home": "üè†",
    "next": "‚û°Ô∏è",
    "prev": "‚¨ÖÔ∏è",
    "money": "üíµ",
    "info": "‚ÑπÔ∏è",
    "success": "‚úÖ",
    "error": "‚ùå"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É
def format_size(size):
    """–§–æ—Ä–º–∞—Ç—É—î —Ä–æ–∑–º—ñ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –≤–∏–¥–∞–ª—è—é—á–∏ –∑–∞–π–≤—ñ –Ω—É–ª—ñ"""
    if isinstance(size, (int, float)):
        if size.is_integer():
            return str(int(size))
    return str(size).rstrip('0').rstrip('.') if '.' in str(size) else str(size)

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—É
async def send_shoe_details(context, chat_id, item):
    shoe_id, name, brand, size, price, image_url = item
    display_size = format_size(size)
    caption = (
        f"{EMOJI['shoes']} <b>{name}</b>\n"
        f"{EMOJI['brand']} <b>–ë—Ä–µ–Ω–¥:</b> {brand}\n"
        f"{EMOJI['size']} <b>–†–æ–∑–º—ñ—Ä:</b> {display_size}\n"
        f"{EMOJI['money']} <b>–¶—ñ–Ω–∞:</b> {price} –≥—Ä–Ω\n"
        f"üÜî ID: {shoe_id}"
    )

    try:
        if image_url and image_url.startswith('http'):
            return await context.bot.send_photo(
                chat_id=chat_id,
                photo=image_url,
                caption=caption,
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–æ—Å—å, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ —Ñ–æ—Ç–æ
        await context.bot.send_message(
            chat_id=chat_id,
            text=caption + f"\n\n{EMOJI['error']} –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.",
            parse_mode="HTML"
        )
        return None # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ None, —è–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–æ—Å—å

    return await context.bot.send_message(
        chat_id=chat_id,
        text=caption,
        parse_mode="HTML"
    )

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def save_menu_state(user_id, menu_name):
    if user_id not in user_menu_stack:
        user_menu_stack[user_id] = []
    if not user_menu_stack[user_id] or user_menu_stack[user_id][-1] != menu_name:
        user_menu_stack[user_id].append(menu_name)

# –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é
async def back_to_previous_menu(update, context):
    query = update.callback_query
    user_id = query.from_user.id

    if user_id in user_menu_stack and len(user_menu_stack[user_id]) > 1:
        user_menu_stack[user_id].pop()  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –º–µ–Ω—é –∑—ñ —Å—Ç–µ–∫—É
        previous_menu = user_menu_stack[user_id][-1]

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é
        if previous_menu == "main":
            await show_main_menu(update, context)
        elif previous_menu == "filters":
            await show_filter_menu(update, context)
        elif previous_menu == "admin":
            await show_admin_menu(update, context)
        elif previous_menu == "brands":
            await show_brand_menu(update, context)
        elif previous_menu == "sizes":
            await show_size_menu(update, context)
        elif previous_menu == "remove_shoes": # –Ø–∫—â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            await remove_shoe_menu(update, context)
        elif previous_menu == "admin_list_shoes": # –Ø–∫—â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –∑—ñ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω–∞
            await list_shoes(update, context)
    else:
        # –Ø–∫—â–æ —Å—Ç–µ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å –ª–∏—à–µ –æ–¥–Ω–µ –º–µ–Ω—é, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ
        await show_main_menu(update, context)

### –ú–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

#### –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def show_main_menu(update, context):
    save_menu_state(update.effective_user.id, "main")

    keyboard = [
        [InlineKeyboardButton(f"{EMOJI['shoes']} –£—Å—ñ —Ç–æ–≤–∞—Ä–∏", callback_data="show_all")],
        [InlineKeyboardButton(f"{EMOJI['filter']} –§—ñ–ª—å—Ç—Ä —Ç–æ–≤–∞—Ä—ñ–≤", callback_data="filter_options")],
    ]

    if update.effective_user.id == YOUR_ADMIN_ID:
        keyboard.append([InlineKeyboardButton(f"{EMOJI['admin']} –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏/–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏
    if update.callback_query:
        await update.callback_query.message.edit_text(
            "üëü <b>–ú–∞–≥–∞–∑–∏–Ω –≤–∑—É—Ç—Ç—è DoomerSneakers</b>\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    elif update.message:
        await update.message.reply_text(
            "üëü <b>–ú–∞–≥–∞–∑–∏–Ω –≤–∑—É—Ç—Ç—è DoomerSneakers</b>\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )

### –§—ñ–ª—å—Ç—Ä–∏

#### –ú–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
async def show_filter_menu(update, context):
    save_menu_state(update.effective_user.id, "filters")
    user_id = update.effective_user.id

    if user_id not in user_filters:
        user_filters[user_id] = {'brands': [], 'sizes': []}

    filters_data = user_filters[user_id]
    filter_info = ""
    if filters_data['brands']:
        filter_info += f"{EMOJI['brand']} <b>–ë—Ä–µ–Ω–¥–∏:</b> {', '.join(filters_data['brands'])}\n"
    if filters_data['sizes']:
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        formatted_sizes = [format_size(s) for s in filters_data['sizes']]
        filter_info += f"{EMOJI['size']} <b>–†–æ–∑–º—ñ—Ä–∏:</b> {', '.join(formatted_sizes)}\n"

    keyboard = [
        [InlineKeyboardButton(f"{EMOJI['brand']} –§—ñ–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É", callback_data="brand_filter")],
        [InlineKeyboardButton(f"{EMOJI['size']} –§—ñ–ª—å—Ç—Ä –ø–æ —Ä–æ–∑–º—ñ—Ä—É", callback_data="size_filter")],
        [InlineKeyboardButton(f"{EMOJI['apply']} –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏", callback_data="apply_filters")],
        [InlineKeyboardButton(f"{EMOJI['reset']} –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏", callback_data="reset_filters")],
        [InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="back_menu")]
    ]

    await update.callback_query.message.edit_text(
        f"‚öôÔ∏è <b>–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–æ–≤–∞—Ä—ñ–≤</b>\n\n"
        f"{'üîç <b>–ü–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏:</b>\n' + filter_info if filter_info else ''}"
        f"–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

#### –ú–µ–Ω—é –±—Ä–µ–Ω–¥—ñ–≤
async def show_brand_menu(update, context):
    save_menu_state(update.effective_user.id, "brands")
    user_id = update.effective_user.id

    conn = sqlite3.connect('shoes.db')
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT brand FROM shoes")
    brands = [row[0] for row in cursor.fetchall()]
    conn.close()

    keyboard = []
    for brand in brands:
        is_selected = brand in user_filters.get(user_id, {}).get('brands', [])
        text = f"{'‚úÖ' if is_selected else '‚óªÔ∏è'} {brand}"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"toggle_brand_{brand}")])

    keyboard.append([InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="back_menu")])

    await update.callback_query.message.edit_text(
        f"{EMOJI['brand']} <b>–û–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥–∏:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

#### –ú–µ–Ω—é —Ä–æ–∑–º—ñ—Ä—ñ–≤
async def show_size_menu(update, context):
    save_menu_state(update.effective_user.id, "sizes")
    user_id = update.effective_user.id

    conn = sqlite3.connect('shoes.db')
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT size FROM shoes ORDER BY size")
    sizes = [row[0] for row in cursor.fetchall()]
    conn.close()

    keyboard = []
    for size_val in sizes:
        # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ float –∑–Ω–∞—á–µ–Ω–Ω—è
        is_selected = float(size_val) in user_filters.get(user_id, {}).get('sizes', [])
        display_size = format_size(size_val)
        text = f"{'‚úÖ' if is_selected else '‚óªÔ∏è'} –†–æ–∑–º—ñ—Ä {display_size}"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"toggle_size_{size_val}")])

    keyboard.append([InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="back_menu")])

    await update.callback_query.message.edit_text(
        f"{EMOJI['size']} <b>–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä–∏:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

#### –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞
async def toggle_filter(update, context):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    if user_id not in user_filters:
        user_filters[user_id] = {'brands': [], 'sizes': []}

    if data.startswith("toggle_brand_"):
        brand = data.replace("toggle_brand_", "")
        if brand in user_filters[user_id]['brands']:
            user_filters[user_id]['brands'].remove(brand)
        else:
            user_filters[user_id]['brands'].append(brand)
        await show_brand_menu(update, context)  # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é –±—Ä–µ–Ω–¥—ñ–≤

    elif data.startswith("toggle_size_"):
        size_str = data.replace("toggle_size_", "")
        try:
            size_float = float(size_str)
            if size_float in user_filters[user_id]['sizes']:
                user_filters[user_id]['sizes'].remove(size_float)
            else:
                user_filters[user_id]['sizes'].append(size_float)
            await show_size_menu(update, context)  # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é —Ä–æ–∑–º—ñ—Ä—ñ–≤
        except ValueError:
            logger.error(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä–æ–∑–º—ñ—Ä—É –≤ callback_data: {size_str}")
            await query.answer(f"{EMOJI['error']} –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É —Ä–æ–∑–º—ñ—Ä—É.", show_alert=True)

#### –°–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
async def reset_filters(update, context):
    user_id = update.effective_user.id
    user_filters[user_id] = {'brands': [], 'sizes': []}
    await show_filter_menu(update, context)
    await update.callback_query.answer("–§—ñ–ª—å—Ç—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ!", show_alert=True)

### –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å

#### –ê–¥–º—ñ–Ω-–º–µ–Ω—é
async def show_admin_menu(update, context):
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –≤–∏–∫–ª–∏–∫ –∑ callback_query —á–∏ –∑ message
    if update.callback_query:
        user_id = update.callback_query.from_user.id
        message_to_edit = update.callback_query.message
    elif update.message:
        user_id = update.message.from_user.id
        message_to_edit = update.message
    else:
        logger.error("show_admin_menu –≤–∏–∫–ª–∏–∫–∞–Ω–æ –±–µ–∑ update.callback_query –∞–±–æ update.message")
        return

    if user_id != YOUR_ADMIN_ID:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.", show_alert=True)
        return

    save_menu_state(user_id, "admin")

    keyboard = [
        [InlineKeyboardButton(f"{EMOJI['add']} –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="add_shoe_prompt")],
        [InlineKeyboardButton(f"{EMOJI['remove']} –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="remove_shoe_menu")],
        [InlineKeyboardButton(f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤", callback_data="admin_list_shoes")],
        [InlineKeyboardButton(f"{EMOJI['back']} –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_menu")]
    ]

    # –†–µ–¥–∞–≥—É—î–º–æ –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É update
    if update.callback_query:
        await message_to_edit.edit_text(
            f"{EMOJI['admin']} <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    elif update.message:
        await message_to_edit.reply_text(
            f"{EMOJI['admin']} <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )


#### –ó–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É (–ø–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É)
async def add_shoe_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != YOUR_ADMIN_ID:
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.", show_alert=True)
        return

    user_id = update.effective_user.id
    adding_shoe_state[user_id] = {'step': 1, 'data': {}}
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å <b>–Ω–∞–∑–≤—É</b> —Ç–æ–≤–∞—Ä—É:",
        parse_mode="HTML"
    )
    if update.callback_query:
        try:
            # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω-–º–µ–Ω—é, —è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ –∫–Ω–æ–ø–∫–∏
            await update.callback_query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è add_shoe_prompt: {e}")


#### –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
async def add_shoe_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id != YOUR_ADMIN_ID or user_id not in adding_shoe_state:
        # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∞–±–æ –Ω–µ –∞–¥–º—ñ–Ω
        return

    state = adding_shoe_state[user_id]
    text = update.message.text

    if state['step'] == 1:
        state['data']['name'] = text
        state['step'] = 2
        await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å <b>–±—Ä–µ–Ω–¥</b> —Ç–æ–≤–∞—Ä—É:", parse_mode="HTML")
    elif state['step'] == 2:
        state['data']['brand'] = text
        state['step'] = 3
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å <b>—Ä–æ–∑–º—ñ—Ä</b> —Ç–æ–≤–∞—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 42.5 –∞–±–æ 43):", parse_mode="HTML")
    elif state['step'] == 3:
        try:
            # –û–±—Ä–æ–±–∫–∞ –¥—Ä–æ–±–æ–≤–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤, –∑–∞–º—ñ–Ω–∞ –∫–æ–º–∏ –Ω–∞ –∫—Ä–∞–ø–∫—É
            text = text.replace(',', '.').strip()
            size = float(text)
            if size <= 0:
                raise ValueError("–†–æ–∑–º—ñ—Ä –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º —á–∏—Å–ª–æ–º.")
            state['data']['size'] = size
            state['step'] = 4
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å <b>—Ü—ñ–Ω—É</b> —Ç–æ–≤–∞—Ä—É (—Ü—ñ–ª–µ —á–∏—Å–ª–æ):", parse_mode="HTML")
        except ValueError as e:
            await update.message.reply_text(f"{EMOJI['error']} –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä–æ–∑–º—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 42.5): {str(e)}")
    elif state['step'] == 4:
        try:
            price = int(text)
            if price <= 0:
                raise ValueError("–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º —á–∏—Å–ª–æ–º.")
            state['data']['price'] = price
            state['step'] = 5
            await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</b> —Ç–æ–≤–∞—Ä—É (–∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω—ñ', —è–∫—â–æ –Ω–µ–º–∞—î):", parse_mode="HTML")
        except ValueError as e:
            await update.message.reply_text(f"{EMOJI['error']} –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ü—ñ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ: {str(e)}")
    elif state['step'] == 5:
        image_url = text if text.lower() != '–Ω—ñ' else None
        state['data']['image'] = image_url

        conn = sqlite3.connect('shoes.db')
        cursor = conn.cursor()
        try:
            cursor.execute(
                "INSERT INTO shoes (name, brand, size, price, image) VALUES (?, ?, ?, ?, ?)",
                (state['data']['name'], state['data']['brand'], state['data']['size'],
                 state['data']['price'], state['data']['image'])
            )
            conn.commit()
            await update.message.reply_text(f"{EMOJI['success']} –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
            logger.info(f"–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ: {state['data']}")
        except Exception as e:
            conn.rollback()
            await update.message.reply_text(f"{EMOJI['error']} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É: {e}")
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É: {e}")
        finally:
            conn.close()
            del adding_shoe_state[user_id]  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        # –ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ update.message
        await show_admin_menu(update, context)

#### –ú–µ–Ω—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ (—Å–ø–∏—Å–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è)
async def remove_shoe_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != YOUR_ADMIN_ID:
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.", show_alert=True)
        return

    save_menu_state(update.effective_user.id, "remove_shoes")

    conn = sqlite3.connect('shoes.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, brand, size, price FROM shoes ORDER BY id DESC")
    shoes = cursor.fetchall()
    conn.close()

    keyboard = []
    if not shoes:
        message = f"{EMOJI['info']} –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."
    else:
        message = f"{EMOJI['remove']} <b>–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:</b>"
        for shoe_id, name, brand, size, price in shoes:
            display_size = format_size(size)
            btn_text = f"üóëÔ∏è {name} ({brand}, {display_size}, {price} –≥—Ä–Ω) - ID: {shoe_id}"
            keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"remove_{shoe_id}")])

    keyboard.append([InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="back_menu")])

    await update.callback_query.message.edit_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

#### –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
async def remove_shoe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != YOUR_ADMIN_ID:
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.", show_alert=True)
        return

    query = update.callback_query
    shoe_id = int(query.data.replace("remove_", ""))

    conn = sqlite3.connect('shoes.db')
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM shoes WHERE id = ?", (shoe_id,))
        conn.commit()
        await query.answer(f"{EMOJI['success']} –¢–æ–≤–∞—Ä ID:{shoe_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!", show_alert=True)
        logger.info(f"–¢–æ–≤–∞—Ä ID:{shoe_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        conn.rollback()
        await query.answer(f"{EMOJI['error']} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É: {e}", show_alert=True)
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É ID:{shoe_id}: {e}")
    finally:
        conn.close()

    await remove_shoe_menu(update, context)  # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è

#### –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ (–¥–ª—è –∞–¥–º—ñ–Ω–∞, –±–µ–∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó, –ø—Ä–æ—Å—Ç—ñ—à–∏–π —Å–ø–∏—Å–æ–∫)
async def list_shoes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != YOUR_ADMIN_ID:
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.", show_alert=True)
        return

    save_menu_state(update.effective_user.id, "admin_list_shoes")

    conn = sqlite3.connect('shoes.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, brand, size, price FROM shoes")
    shoes = cursor.fetchall()
    conn.close()

    message = f"{EMOJI['list']} <b>–°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤:</b>\n\n"
    if not shoes:
        message += "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤."
    else:
        for shoe_id, name, brand, size, price in shoes:
            display_size = format_size(size)
            message += f"üÜî {shoe_id}: {name} ({brand}, {display_size} —Ä–æ–∑–º—ñ—Ä, {price} –≥—Ä–Ω)\n"

    keyboard = [[InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="back_menu")]]

    await update.callback_query.message.edit_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

### –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤

async def show_shoes_page(update, context, page=0):
    user_id = update.effective_user.id
    filters_data = user_filters.get(user_id, {})

    conn = sqlite3.connect('shoes.db')
    cursor = conn.cursor()

    query = "SELECT * FROM shoes WHERE 1=1"
    params = []

    if 'brands' in filters_data and filters_data['brands']:
        query += f" AND brand IN ({','.join(['?']*len(filters_data['brands']))})"
        params.extend(filters_data['brands'])

    if 'sizes' in filters_data and filters_data['sizes']:
        # –†–æ–∑–º—ñ—Ä–∏ –≤–∂–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —è–∫ float, —Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
        size_params = filters_data['sizes']
        query += f" AND size IN ({','.join(['?']*len(size_params))})"
        params.extend(size_params)

    cursor.execute(query, params)
    all_items = cursor.fetchall()
    conn.close()

    total_items = len(all_items)
    total_pages = (total_items + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    current_page = max(0, min(page, total_pages - 1)) if total_pages > 0 else 0

    start_idx = current_page * ITEMS_PER_PAGE
    end_idx = min(start_idx + ITEMS_PER_PAGE, total_items)

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω—é
    if update.callback_query:
        try:
            await update.callback_query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–º–æ–∂–ª–∏–≤–æ, –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î): {e}")

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–æ–≤–∞—Ä–∏
    if not all_items:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üôÅ <b>–ù–∞ –∂–∞–ª—å, —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</b>",
            parse_mode="HTML"
        )
    elif not all_items[start_idx:end_idx]:
         await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üôÅ <b>–ù–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.</b>",
            parse_mode="HTML"
        )
    else:
        for item in all_items[start_idx:end_idx]:
            await send_shoe_details(context, update.effective_chat.id, item)

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(InlineKeyboardButton(f"{EMOJI['prev']} –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ", callback_data=f"page_{current_page-1}"))
    if end_idx < total_items:
        pagination_buttons.append(InlineKeyboardButton(f"–ù–∞—Å—Ç—É–ø–Ω—ñ {EMOJI['next']}", callback_data=f"page_{current_page+1}"))

    menu_buttons = [
        InlineKeyboardButton(f"{EMOJI['back']} –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_menu"),
        InlineKeyboardButton(f"{EMOJI['filter']} –ó–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏", callback_data="filter_options")
    ]

    keyboard = []
    if pagination_buttons:
        keyboard.append(pagination_buttons)
    keyboard.append(menu_buttons)

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üìÑ <b>–°—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page+1}/{total_pages if total_pages > 0 else 1} | –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {total_items}</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

### –û–±—Ä–æ–±–Ω–∏–∫–∏ Telegram API

#### –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update, context)

#### –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback_query, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–Ω–∏–∫"
    data = query.data

    if data == "back_menu":
        await back_to_previous_menu(update, context)
    elif data == "show_all":
        # –ü–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤, —Å–∫–∏–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏, —â–æ–± –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –î–Ü–ô–°–ù–û –í–°–Ü
        user_id = update.effective_user.id
        user_filters[user_id] = {'brands': [], 'sizes': []}
        await show_shoes_page(update, context, page=0)
    elif data == "filter_options":
        await show_filter_menu(update, context)
    elif data == "brand_filter":
        await show_brand_menu(update, context)
    elif data == "size_filter":
        await show_size_menu(update, context)
    elif data.startswith("toggle_"):
        await toggle_filter(update, context)
    elif data == "apply_filters":
        await show_shoes_page(update, context, page=0)
    elif data == "reset_filters":
        await reset_filters(update, context)
    elif data == "admin_panel":
        await show_admin_menu(update, context)
    elif data == "add_shoe_prompt":
        await add_shoe_prompt(update, context)
    elif data == "remove_shoe_menu":
        await remove_shoe_menu(update, context)
    elif data.startswith("remove_"):
        await remove_shoe(update, context)
    elif data == "admin_list_shoes":
        await list_shoes(update, context)
    elif data.startswith("page_"):
        page = int(data.split("_")[1])
        await show_shoes_page(update, context, page)

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    # init_db() # –¶–µ–π –≤–∏–∫–ª–∏–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Ñ–∞–π–ª—É –ø—ñ—Å–ª—è —ñ–º–ø–æ—Ä—Ç—É
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    # –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å—Ç–∞–Ω—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.User(YOUR_ADMIN_ID), add_shoe_message_handler))
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")

if __name__ == "__main__":
    main()